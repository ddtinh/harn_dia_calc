import random
import math
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.patches as patches
import tkinter as tk
from tkinter import filedialog, scrolledtext

# Bi·∫øn to√†n c·ª•c l∆∞u ƒë∆∞·ªùng d·∫´n file ƒë√£ ch·ªçn
selected_file_path = None

# ======== H√ÄM C·∫¨P NH·∫¨T LOG ==========
def update_log(message):
    log_text.config(state=tk.NORMAL)
    log_text.insert(tk.END, message + "\n")
    log_text.config(state=tk.DISABLED)
    log_text.see(tk.END)

# ======== H√ÄM X√ìA LOG ==========
def clear_log():
    log_text.config(state=tk.NORMAL)
    log_text.delete("1.0", tk.END)
    log_text.config(state=tk.DISABLED)

# ======== H√ÄM CH·ªåN FILE CSV/EXCEL ==========
def select_file():
    global selected_file_path
    file_path = filedialog.askopenfilename(
        title="Ch·ªçn file d·ªØ li·ªáu",
        filetypes=[("CSV files", "*.csv"), ("Excel files", "*.xls;*.xlsx")]
    )
    
    if not file_path:
        update_log("‚ö† B·∫°n ch∆∞a ch·ªçn file!")
        return
    
    selected_file_path = file_path
    update_log(f"üìÇ File ƒë∆∞·ª£c ch·ªçn: {file_path}")

# ======== H√ÄM CH·∫†Y CH∆Ø∆†NG TR√åNH ==========
def run_program():
    if not selected_file_path:
        update_log("‚ö† B·∫°n ch∆∞a ch·ªçn file!")
        return
    process_file(selected_file_path)

# ======== H√ÄM ƒê·ªåC FILE & X·ª¨ L√ù D·ªÆ LI·ªÜU ==========
def process_file(file_path):
    try:
        if file_path.lower().endswith('.csv'):
            df = pd.read_csv(file_path, sep=';')  
        elif file_path.lower().endswith(('.xls', '.xlsx')):
            df = pd.read_excel(file_path)
        else:
            update_log("‚ùå File kh√¥ng h·ª£p l·ªá! Vui l√≤ng ch·ªçn CSV ho·∫∑c Excel.")
            return
    except Exception as e:
        update_log(f"‚ùå L·ªói ƒë·ªçc file: {e}")
        return

    # Hi·ªÉn th·ªã danh s√°ch c·ªôt
    columns = df.columns.tolist()
    update_log(f"üìä Danh s√°ch c·ªôt: {columns}")

    if len(columns) < 2:
        update_log("‚ùå L·ªñI: File d·ªØ li·ªáu ph·∫£i c√≥ √≠t nh·∫•t 2 c·ªôt!")
        return

    col_quantity = columns[0]
    col_diameter = columns[1]

    diameters = []
    for idx, row in df.iterrows():
        try:
            count = int(row[col_quantity])
            d = float(row[col_diameter])
            for _ in range(count):
                diameters.append(d)
        except Exception as e:
            update_log(f"‚ö† L·ªói d√≤ng {idx+2}: {e}")

    if not diameters:
        update_log("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu h·ª£p l·ªá trong file!")
        return

    # T√≠nh danh s√°ch b√°n k√≠nh (d = ƒë∆∞·ªùng k√≠nh)
    radii = [d / 2.0 for d in diameters]
    update_log(f"üî¢ T·ªïng s·ªë h√¨nh tr√≤n: {len(radii)}")

    container_radius, positions = pack_circles(radii)
    
    if positions is None:
        update_log("‚ùå Kh√¥ng t√¨m ƒë∆∞·ª£c c√°ch s·∫Øp x·∫øp h·ª£p l·ªá!")
        return

    update_log(f"üìè B√°n k√≠nh h√¨nh tr√≤n ch·ª©a t·ªëi ∆∞u: {container_radius:.2f}")
    update_log(f"üìè ƒê∆∞·ªùng k√≠nh h√¨nh tr√≤n ch·ª©a t·ªëi ∆∞u: {2 * container_radius:.2f}")

    plot_packing(container_radius, radii, positions)

# ======== H√ÄM KI·ªÇM TRA V·ªä TR√ç H·ª¢P L·ªÜ ==========
def is_valid(candidate_x, candidate_y, r_i, placed, positions, radii):
    for j in placed:
        xj, yj = positions[j]
        r_j = radii[j]
        if math.hypot(candidate_x - xj, candidate_y - yj) < (r_i + r_j - 1e-6):
            return False
    return True

# ======== H√ÄM TINH CH·ªàNH V·ªä TR√ç ·ª®NG VI√äN ==========
def refine_candidate(candidate, r_i, placed, positions, radii, current_container):
    # S·ª≠ d·ª•ng t√¨m ki·∫øm c·ª•c b·ªô quanh v·ªã tr√≠ candidate ban ƒë·∫ßu
    refinement_step = r_i * 0.05  # b∆∞·ªõc ban ƒë·∫ßu c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh
    best_position = candidate
    best_container = current_container
    improved = True

    while improved and refinement_step > 1e-6:
        improved = False
        for dx in [-refinement_step, 0, refinement_step]:
            for dy in [-refinement_step, 0, refinement_step]:
                new_candidate = (best_position[0] + dx, best_position[1] + dy)
                if not is_valid(new_candidate[0], new_candidate[1], r_i, placed, positions, radii):
                    continue
                new_container = max(current_container, math.hypot(new_candidate[0], new_candidate[1]) + r_i)
                if new_container < best_container:
                    best_container = new_container
                    best_position = new_candidate
                    improved = True
        refinement_step *= 0.5
    return best_position, best_container

# ======== THU·∫¨T TO√ÅN PACKCIRCLE ==========
def pack_circles(radii):
    """
    S·∫Øp x·∫øp c√°c h√¨nh tr√≤n v√†o trong m·ªôt h√¨nh tr√≤n ch·ª©a.
    - radii: danh s√°ch b√°n k√≠nh c√°c h√¨nh tr√≤n.
    Tr·∫£ v·ªÅ:
        container_radius: b√°n k√≠nh c·ªßa h√¨nh tr√≤n ch·ª©a t·ªëi ∆∞u
        positions: danh s√°ch t·ªça ƒë·ªô (x, y) c·ªßa c√°c h√¨nh tr√≤n theo ch·ªâ s·ªë ban ƒë·∫ßu.
    """
    n = len(radii)
    positions = [None] * n
    ANGLE_STEP = 1  # Gi·∫£m b∆∞·ªõc qu√©t g√≥c t·ª´ 5¬∞ xu·ªëng 1¬∞ ƒë·ªÉ tƒÉng ƒë·ªô ch√≠nh x√°c

    # S·∫Øp x·∫øp ch·ªâ s·ªë c√°c h√¨nh theo b√°n k√≠nh gi·∫£m d·∫ßn
    sorted_indices = sorted(range(n), key=lambda i: radii[i], reverse=True)
    placed = []

    # ƒê·∫∑t h√¨nh tr√≤n l·ªõn nh·∫•t t·∫°i t√¢m (0,0)
    first_idx = sorted_indices[0]
    positions[first_idx] = (0, 0)
    container_radius = radii[first_idx]
    placed.append(first_idx)

    # ƒê·∫∑t c√°c h√¨nh tr√≤n c√≤n l·∫°i
    for idx in sorted_indices[1:]:
        r_i = radii[idx]
        best_position = None
        best_container = float('inf')
        # X√©t c√°c v·ªã tr√≠ ·ª©ng vi√™n d·ª±a tr√™n c√°c h√¨nh ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t
        for j in placed:
            xj, yj = positions[j]
            r_j = radii[j]
            # Qu√©t c√°c g√≥c v·ªõi b∆∞·ªõc nh·ªè h∆°n ƒë·ªÉ tƒÉng ƒë·ªô ch√≠nh x√°c
            for angle_deg in range(0, 360, ANGLE_STEP):
                angle = math.radians(angle_deg)
                candidate_x = xj + (r_j + r_i) * math.cos(angle)
                candidate_y = yj + (r_j + r_i) * math.sin(angle)
                if not is_valid(candidate_x, candidate_y, r_i, placed, positions, radii):
                    continue
                candidate_container = max(container_radius, math.hypot(candidate_x, candidate_y) + r_i)
                if candidate_container < best_container:
                    best_container = candidate_container
                    best_position = (candidate_x, candidate_y)
        if best_position is None:
            # N·∫øu kh√¥ng t√¨m ƒë∆∞·ª£c v·ªã tr√≠ ·ª©ng vi√™n, ƒë·∫∑t h√¨nh b√™n ph·∫£i v√πng ch·ª©a hi·ªán t·∫°i
            best_position = (container_radius + r_i, 0)
            best_container = math.hypot(best_position[0], best_position[1]) + r_i

        # Tinh ch·ªânh v·ªã tr√≠ ·ª©ng vi√™n b·∫±ng t√¨m ki·∫øm c·ª•c b·ªô
        best_position, best_container = refine_candidate(best_position, r_i, placed, positions, radii, best_container)

        positions[idx] = best_position
        container_radius = max(container_radius, best_container)
        placed.append(idx)
    return container_radius, positions

# ======== H√ÄM V·∫º K·∫æT QU·∫¢ ==========
def plot_packing(container_radius, radii, positions):
    fig, ax = plt.subplots()
    
    # V·∫Ω h√¨nh tr√≤n ch·ª©a
    container_circle = patches.Circle((0, 0), container_radius, fill=False, edgecolor='red', linewidth=2)
    ax.add_patch(container_circle)
    
    # V·∫Ω c√°c h√¨nh tr√≤n nh·ªè v·ªõi m√†u s·∫Øc ng·∫´u nhi√™n
    small_circles = []
    for i, (x, y) in enumerate(positions):
        color = (random.random(), random.random(), random.random())
        circle = patches.Circle((x, y), radii[i], facecolor=color, edgecolor='black', alpha=0.5)
        ax.add_patch(circle)
        small_circles.append(circle)
    
    ax.set_xlim(-container_radius, container_radius)
    ax.set_ylim(-container_radius, container_radius)
    ax.set_aspect('equal', adjustable='box')
    ax.axhline(0, color='black', linewidth=1)
    ax.axvline(0, color='black', linewidth=1)
    
    # T·∫°o annotation hi·ªÉn th·ªã ƒë∆∞·ªùng k√≠nh khi hover chu·ªôt
    annot = ax.annotate(
        "", 
        xy=(0, 0), 
        xytext=(20, 20), 
        textcoords="offset points",
        bbox=dict(boxstyle="round", fc="w"),
        arrowprops=dict(arrowstyle="->")
    )
    annot.set_visible(False)
    
    def on_hover(event):
        if event.inaxes == ax:
            for circle in small_circles:
                contains, _ = circle.contains(event)
                if contains:
                    annot.xy = circle.center
                    diam = 2 * circle.get_radius()
                    annot.set_text(f"œÜ{diam:.2f}")
                    annot.set_visible(True)
                    fig.canvas.draw_idle()
                    break
            else:
                if annot.get_visible():
                    annot.set_visible(False)
                    fig.canvas.draw_idle()
    
    fig.canvas.mpl_connect("motion_notify_event", on_hover)
    plt.title(f"ƒê∆∞·ªùng k√≠nh ch·ª©a: {2 * container_radius:.2f}")
    plt.show()

# ======== GIAO DI·ªÜN TKINTER ==========
root = tk.Tk()
root.title("ƒê∆∞·ªùng k√≠nh harness")

frame = tk.Frame(root)
frame.pack(pady=10)

btn_select = tk.Button(frame, text="Ch·ªçn file csv/xls/xlsx", command=select_file, font=("Arial", 12))
btn_select.pack(side=tk.LEFT, padx=5)

btn_run = tk.Button(frame, text="RUN", command=run_program, font=("Arial", 12))
btn_run.pack(side=tk.LEFT, padx=5)

btn_clear = tk.Button(frame, text="X√≥a Log", command=clear_log, font=("Arial", 12))
btn_clear.pack(side=tk.LEFT, padx=5)

log_text = scrolledtext.ScrolledText(root, width=50, height=15, font=("Arial", 10))
log_text.pack(pady=10)
log_text.config(state=tk.DISABLED)

root.mainloop()
